#include <iostream>

#include "NeoHandle.h"
#include "FxnStrainRegistrationJni.h"
#include "BSplineImageRegistration.h"

using namespace std;
using namespace neo;

int * ConvertJIntArrayToIntPointer(JNIEnv * env, jintArray jArray);
unsigned int * ConvertJIntArrayToUnsignedIntPointer(JNIEnv * env, jintArray jArray);
float * ConvertJFloatArrayToFloatPointer(JNIEnv * env, jfloatArray jArray);
double * ConvertJDoubleArrayToDoublePointer(JNIEnv * env, jdoubleArray jArray);
std::vector<float> ConvertJFloatArrayToFloatVector(JNIEnv * env, jfloatArray jArray);
std::vector<double> ConvertJDoubleArrayToDoubleVector(JNIEnv * env, jdoubleArray jArray);
std::string ConvertJStringToString(JNIEnv * env, jstring jContourId);
jfloatArray ConvertFloatPointerToJFloatArray(JNIEnv * env, float * pointer, unsigned int length);
jfloatArray ConvertFloatVectorToJFloatArray(JNIEnv * env, std::vector<float> vector);
jdoubleArray ConvertDoublePointerToJDoubleArray(JNIEnv * env, double * pointer, unsigned int length);
jdoubleArray ConvertDoubleVectorToJDoubleArray(JNIEnv * env, std::vector<double> vector);
void copyFloatVectorToJFloatArray(JNIEnv * env, jfloatArray jArray, std::vector<float> vector);
void copyDoubleVectorToJDoubleArray(JNIEnv * env, jdoubleArray jArray, std::vector<double> vector);

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    sayHello
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_sayHello
(JNIEnv *, jobject) {
	cout << "!!!Hello World!!!" << endl;
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    initialize
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_initialize__
(JNIEnv *env, jobject thisObj) {
	// Create a registration object
	BSplineImageRegistration *registration = new BSplineImageRegistration();

	// Stow the registration object pointer back to the JAVA wrapper object...
	setHandle(env, thisObj, registration);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    initialize
* Signature: ([F[F[I)V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_initialize___3F_3F_3I
(JNIEnv *env, jobject thisObj, jfloatArray jFixedImage, jfloatArray jMovingImage, jintArray jImageDim) {

	// Convert to C++ pointers
	float *fixedImage = ConvertJFloatArrayToFloatPointer(env, jFixedImage);
	float *movingImage = ConvertJFloatArrayToFloatPointer(env, jMovingImage);
	unsigned int *imageDim = ConvertJIntArrayToUnsignedIntPointer(env, jImageDim);

	// Create a registration object
	BSplineImageRegistration *registration = new BSplineImageRegistration(fixedImage, movingImage, imageDim);

	// Stow the registration object pointer back to the JAVA wrapper object...
	setHandle(env, thisObj, registration);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    addFixedContour
* Signature: (Ljava/lang/String;[D[D)V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_addFixedContour
(JNIEnv *env, jobject thisObj, jstring jContourId, jdoubleArray jFixedContourX, jdoubleArray jFixedContuorY) {

	// Convert to C++ pointers
	std::string contourId = ConvertJStringToString(env, jContourId);
	std::vector<double> fixedContourX = ConvertJDoubleArrayToDoubleVector(env, jFixedContourX);
	std::vector<double> fixedContuorY = ConvertJDoubleArrayToDoubleVector(env, jFixedContuorY);

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);
	
	// Add the fixed contour
	registration->AddFixedContour(contourId, fixedContourX, fixedContuorY);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    addMovingContour
* Signature: (Ljava/lang/String;[D[D)V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_addMovingContour
(JNIEnv *env, jobject thisObj, jstring jContourId, jdoubleArray jMovingContourX, jdoubleArray jMovingContourY) {

	// Convert to C++ objects
	std::string contourId = ConvertJStringToString(env, jContourId);
	std::vector<double> movingContourX = ConvertJDoubleArrayToDoubleVector(env, jMovingContourX);
	std::vector<double> movingContourY = ConvertJDoubleArrayToDoubleVector(env, jMovingContourY);

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);

	// Add the moving contour
	registration->AddMovingContour(contourId, movingContourX, movingContourY);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    register
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_register
(JNIEnv *env, jobject thisObj) {

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);

	// Register
	registration->Register();
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    setNumberOfGridNodesInOneDimension
* Signature: (I)V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_setNumberOfGridNodesInOneDimension
(JNIEnv *env, jobject thisObj, jint jNumGridNodes) {

	// Convert to C++ objects
	int numGridNodes = (int)jNumGridNodes;

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);

	// Set the number of grid nodes in on dimension
	registration->SetNumberOfGridNodesInOneDimension(numGridNodes);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    setOrigin
* Signature: ([D)V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_setOrigin
(JNIEnv *env, jobject thisObj, jdoubleArray jOrigin) {

	// Convert to C++ objects
	std::vector<double> originVector = ConvertJDoubleArrayToDoubleVector(env, jOrigin);

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);

	// Set the origin
	registration->SetOrigin(originVector);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    setPixelSpacing
* Signature: ([D)V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_setPixelSpacing
(JNIEnv *env, jobject thisObj, jdoubleArray jPixelSpacing) {

	// Convert to C++ objects
	std::vector<double> pixelSpacingVector = ConvertJDoubleArrayToDoubleVector(env, jPixelSpacing);

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);

	// Set the origin
	registration->SetPixelSpacing(pixelSpacingVector);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    getParameters
* Signature: ()[D
*/
JNIEXPORT jdoubleArray JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_getParameters
(JNIEnv *env, jobject thisObj) {

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);

	// Get parameters
	std::vector<double> parameterVector = registration->GetParameterVector();

	// Convert to Java object
	jdoubleArray jParameters = ConvertDoubleVectorToJDoubleArray(env, parameterVector);

	return jParameters;
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    setParameters
* Signature: ([D)V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_setParameters
(JNIEnv *env, jobject thisObj, jdoubleArray jParameters) {

	// Convert to C++ objects
	std::vector<double> parameters = ConvertJDoubleArrayToDoubleVector(env, jParameters);

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);

	// Add the fixed contour
	registration->SetParameters(parameters);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    transformPoints
* Signature: ([D[D[D[D)V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_transformPoints
(JNIEnv *env, jobject thisObj, jdoubleArray jInPointsX, jdoubleArray jInPointsY, jdoubleArray jOutPointsX, jdoubleArray jOutPointsY) {

	// Convert to C++ objects
	std::vector<double> inPointsX = ConvertJDoubleArrayToDoubleVector(env, jInPointsX);
	std::vector<double> inPointsY = ConvertJDoubleArrayToDoubleVector(env, jInPointsY);
	std::vector<double> outPointsX;
	std::vector<double> outPointsY;

	// Retrieve the registration instance held by the JAVA side JNI wrapper
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);

	// Transform points
	registration->TransformPoints(inPointsX, inPointsY, outPointsX, outPointsY);

	// Copy to Java objects
	copyDoubleVectorToJDoubleArray(env, jOutPointsX, outPointsX);
	copyDoubleVectorToJDoubleArray(env, jOutPointsY, outPointsY);
}

/*
* Class:     com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper
* Method:    disposeJni
* Signature: ()V
*/
JNIEXPORT void JNICALL Java_com_neosoft_application_analysis_strain_function_engine_FxnStrainNeoItkJniWrapper_disposeJni
(JNIEnv *env, jobject thisObj) {
	BSplineImageRegistration *registration = getHandle<BSplineImageRegistration>(env, thisObj);
	setHandle(env, thisObj, (BSplineImageRegistration*)0);
	delete registration;
}

//JNIEXPORT jdoubleArray JNICALL Java_com_neosoft_application_analysis_function_strainanalysis_engine_NeoItkJniWrapper_register___3F_3F_3I
//(JNIEnv *env, jobject thisObj, jfloatArray jFixedImage, jfloatArray jMovingImage , jintArray jVolumeDim) {
//	cout << "Java_itk_NeoItkJniWrapper_register 1" << endl;
//	
//	// Extract the dimension values for the image and results data...
//	//size_t volumeDimLength = (size_t)env->GetArrayLength(jVolumeDim);
//	//jint *jVolumeDimPtr = env->GetIntArrayElements(jVolumeDim, 0);
//	//int *volumeDim = new int[volumeDimLength];
//	//memcpy(volumeDim, jVolumeDimPtr, volumeDimLength * sizeof(int));
//	int *volumeDim = ConvertJIntArrayToIntPointer(env, jVolumeDim);
//
//	//// Copy the volume data to the input layer
//	//size_t fixedImageLength = (size_t)env->GetArrayLength(jFixedImage);
//	//jfloat *jFixedImagePtr = env->GetFloatArrayElements(jFixedImage, 0);
//	//cout << "fixedImageLength " << fixedImageLength << endl;
//	//cout << "Java_itk_NeoItkJniWrapper_register 2" << endl;
//	//float *fixedImage = new float[fixedImageLength];
//	//memcpy(fixedImage, jFixedImagePtr, fixedImageLength * sizeof(float));
//	//cout << "Java_itk_NeoItkJniWrapper_register 3" << endl;
//	float *fixedImage = ConvertJFloatArrayToFloatPointer(env, jFixedImage);
//
//	// Copy the volume data to the input layer
//	//size_t movingImageLength = (size_t)env->GetArrayLength(jMovingImage);
//	//jfloat *jMovingImagePtr = env->GetFloatArrayElements(jMovingImage, 0);
//	//cout << "movingImageLength " << movingImageLength << endl;
//	//cout << "Java_itk_NeoItkJniWrapper_register 4" << endl;
//	//float *movingImage = new float[movingImageLength];
//	//memcpy(movingImage, jMovingImagePtr, movingImageLength * sizeof(float));
//	//cout << "Java_itk_NeoItkJniWrapper_register 5" << endl;
//	float *movingImage = ConvertJFloatArrayToFloatPointer(env, jMovingImage);
//	
//	// Register
//	double* parameters = ImageRegistrationMethodBSpline(fixedImage, movingImage, volumeDim);
//	cout << "Java_itk_NeoItkJniWrapper_register 6" << endl;
//
//	// 
//	jdoubleArray jParameters = env->NewDoubleArray((jsize)(1152));
//	env->SetDoubleArrayRegion(jParameters, 0, (jsize)(1152), parameters);
//
//	return jParameters;
//}

int * ConvertJIntArrayToIntPointer(JNIEnv * env, jintArray jArray) {

	size_t length = (size_t)env->GetArrayLength(jArray);
	jint *jPointer = env->GetIntArrayElements(jArray, 0);
	int *pointer = new int[length];
	memcpy(pointer, jPointer, length * sizeof(int));

	return pointer;
}

unsigned int * ConvertJIntArrayToUnsignedIntPointer(JNIEnv * env, jintArray jArray) {

	size_t length = (size_t)env->GetArrayLength(jArray);
	jint *jPointer = env->GetIntArrayElements(jArray, 0);
	unsigned int *pointer = new unsigned int[length];
	memcpy(pointer, jPointer, length * sizeof(unsigned int));

	return pointer;
}

float * ConvertJFloatArrayToFloatPointer(JNIEnv * env, jfloatArray jArray) {

	size_t length = (size_t)env->GetArrayLength(jArray);
	jfloat *jPointer = env->GetFloatArrayElements(jArray, 0);
	float *pointer = new float[length];
	memcpy(pointer, jPointer, length * sizeof(float));

	return pointer;
}

double * ConvertJDoubleArrayToDoublePointer(JNIEnv * env, jdoubleArray jArray) {

	size_t length = (size_t)env->GetArrayLength(jArray);
	jdouble *jPointer = env->GetDoubleArrayElements(jArray, 0);
	double *pointer = new double[length];
	memcpy(pointer, jPointer, length * sizeof(double));

	return pointer;
}

std::vector<float> ConvertJFloatArrayToFloatVector(JNIEnv * env, jfloatArray jArray) {

	size_t length = (size_t)env->GetArrayLength(jArray);
	jfloat *jPointer = env->GetFloatArrayElements(jArray, 0);
	float *pointer = new float[length];
	memcpy(pointer, jPointer, length * sizeof(float));

	std::vector<float> vector(pointer, pointer + length);

	return vector;
}

std::vector<double> ConvertJDoubleArrayToDoubleVector(JNIEnv * env, jdoubleArray jArray) {

	size_t length = (size_t)env->GetArrayLength(jArray);
	jdouble *jPointer = env->GetDoubleArrayElements(jArray, 0);
	double *pointer = new double[length];
	memcpy(pointer, jPointer, length * sizeof(double));

	std::vector<double> vector(pointer, pointer + length);

	return vector;
}

std::string ConvertJStringToString(JNIEnv * env, jstring jContourId) {
	const char *pointer = env->GetStringUTFChars(jContourId, 0);
	std::string string(pointer);

	return string;
}

jfloatArray ConvertFloatPointerToJFloatArray(JNIEnv * env, float * pointer, unsigned int length) {

	jfloatArray jArray = env->NewFloatArray((jsize)(length));
	env->SetFloatArrayRegion(jArray, 0, (jsize)(length), pointer);

	return jArray;
}

jfloatArray ConvertFloatVectorToJFloatArray(JNIEnv * env, std::vector<float> vector) {

	size_t length = vector.size();
	float * pointer = &vector[0];

	return ConvertFloatPointerToJFloatArray(env, pointer, length);
}

jdoubleArray ConvertDoublePointerToJDoubleArray(JNIEnv * env, double * pointer, unsigned int length) {

	jdoubleArray jArray = env->NewDoubleArray((jsize)(length));
	env->SetDoubleArrayRegion(jArray, 0, (jsize)(length), pointer);

	return jArray;
}

jdoubleArray ConvertDoubleVectorToJDoubleArray(JNIEnv * env, std::vector<double> vector) {

	size_t length = vector.size();
	double * pointer = &vector[0];

	return ConvertDoublePointerToJDoubleArray(env, pointer, length);
}

void copyFloatVectorToJFloatArray(JNIEnv * env, jfloatArray jArray, std::vector<float> vector) {
	size_t length = (size_t)env->GetArrayLength(jArray);
	float * pointer = &vector[0];

	env->SetFloatArrayRegion(jArray, 0, (jsize)(length), pointer);
}

void copyDoubleVectorToJDoubleArray(JNIEnv * env, jdoubleArray jArray, std::vector<double> vector) {
	size_t length = (size_t)env->GetArrayLength(jArray);
	double * pointer = &vector[0];

	env->SetDoubleArrayRegion(jArray, 0, (jsize)(length), pointer);
}