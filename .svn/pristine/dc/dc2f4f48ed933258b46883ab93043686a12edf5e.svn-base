#include "itkImageRegistrationMethod.h"

#include "itkMeanSquaresImageToImageMetric.h"
#include "itkNormalizedCorrelationImageToImageMetric.h"

#include "itkTimeProbesCollectorBase.h"
#include "itkSpatialObjectToImageFilter.h"
#include "itkEllipseSpatialObject.h"

#include "itkBSplineTransform.h"
#include "itkLBFGSOptimizer.h"
#include "itkRegularStepGradientDescentOptimizer.h"
#include "itkImageFileWriter.h"
#include "itkResampleImageFilter.h"
#include "itkCastImageFilter.h"
#include "itkSquaredDifferenceImageFilter.h"
#include "itkImportImageFilter.h"
#include "QuickView.h"

const    unsigned int    ImageDimension = 2;
typedef  float           PixelType;

typedef itk::Image< PixelType, ImageDimension >  ImageType;
using namespace std;

static void CreateEllipseImage(ImageType::Pointer image);
static void CreateCircleImage(ImageType::Pointer image);
static void CreateImage(ImageType::Pointer image, float *fImage, int *imageDim);

class CommandIterationUpdate : public itk::Command
{
public:
	typedef  CommandIterationUpdate   Self;
	typedef  itk::Command             Superclass;
	typedef itk::SmartPointer<Self>   Pointer;
	itkNewMacro(Self);

protected:
	CommandIterationUpdate() {};

public:
	typedef itk::RegularStepGradientDescentOptimizer OptimizerType;
	typedef   const OptimizerType *                  OptimizerPointer;

	void Execute(itk::Object *caller, const itk::EventObject & event) ITK_OVERRIDE
	{
		Execute((const itk::Object *)caller, event);
	}

	void Execute(const itk::Object * object, const itk::EventObject & event) ITK_OVERRIDE
	{
		OptimizerPointer optimizer =
			static_cast< OptimizerPointer >(object);
		if (!(itk::IterationEvent().CheckEvent(&event)))
		{
			return;
		}
		std::cout << "Iteration : ";
		std::cout << optimizer->GetCurrentIteration() << "   ";
		std::cout << optimizer->GetValue() << "   ";
		std::cout << std::endl;
	}
};

double* ImageRegistrationMethodBSpline(float *fFixedImage, float *fMovingImage, int *imageDim)
{

	const unsigned int SpaceDimension = ImageDimension;
	const unsigned int SplineOrder = 3;
	typedef double CoordinateRepType;

	typedef itk::BSplineTransform<
		CoordinateRepType,
		SpaceDimension,
		SplineOrder >     TransformType;



	typedef itk::LinearInterpolateImageFunction<
		ImageType,
		double          >    InterpolatorType;

	typedef itk::ImageRegistrationMethod<
		ImageType,
		ImageType >    RegistrationType;

	//// MEAN SQUARES METRIC
	//typedef itk::MeanSquaresImageToImageMetric<ImageType, ImageType >    MetricType;
	//MetricType::Pointer         metric        = MetricType::New();

	typedef itk::NormalizedCorrelationImageToImageMetric<ImageType, ImageType> MetricType;
	MetricType::Pointer         metric = MetricType::New();

	////// LBFGS Optimizer.
	//typedef itk::LBFGSOptimizer       OptimizerType;
	//OptimizerType::Pointer      optimizer     = OptimizerType::New();
	//optimizer->SetGradientConvergenceTolerance(0.05);
	//optimizer->SetLineSearchAccuracy(0.9);
	//optimizer->SetDefaultStepLength(.5);
	//optimizer->TraceOn();
	//optimizer->SetMaximumNumberOfFunctionEvaluations(1000);

	// REGULAR STEP GRADIENT DESCENT
	typedef itk::RegularStepGradientDescentOptimizer       OptimizerType;
	OptimizerType::Pointer      optimizer = OptimizerType::New();
	optimizer->SetMaximumStepLength(10.0);
	optimizer->SetMinimumStepLength(0.01);
	optimizer->SetRelaxationFactor(0.7);
	optimizer->SetNumberOfIterations(100);// original 200
	optimizer->SetGradientMagnitudeTolerance(1e-4);
	// Create the Command observer and register it with the optimizer.
	CommandIterationUpdate::Pointer observer = CommandIterationUpdate::New();
	optimizer->AddObserver(itk::IterationEvent(), observer);

	InterpolatorType::Pointer   interpolator = InterpolatorType::New();
	RegistrationType::Pointer   registration = RegistrationType::New();


	// The old registration framework has problems with multi-threading
	// For now, we set the number of threads to 1
	registration->SetNumberOfThreads(1);

	registration->SetMetric(metric);
	registration->SetOptimizer(optimizer);
	registration->SetInterpolator(interpolator);

	TransformType::Pointer  transform = TransformType::New();
	registration->SetTransform(transform);

	// Create the synthetic images
	ImageType::Pointer  fixedImage = ImageType::New();
	CreateImage(fixedImage, fFixedImage, imageDim);

	ImageType::Pointer movingImage = ImageType::New();
	CreateImage(movingImage, fMovingImage, imageDim);

	// Setup the registration
	registration->SetFixedImage(fixedImage);
	registration->SetMovingImage(movingImage);

	ImageType::RegionType fixedRegion = fixedImage->GetBufferedRegion();
	registration->SetFixedImageRegion(fixedRegion);

	//  Here we define the parameters of the BSplineDeformableTransform grid.  We
	//  arbitrarily decide to use a grid with $5 \times 5$ nodes within the image.
	//  The reader should note that the BSpline computation requires a
	//  finite support region ( 1 grid node at the lower borders and 2
	//  grid nodes at upper borders). Therefore in this example, we set
	//  the grid size to be $8 \times 8$ and place the grid origin such that
	//  grid node (1,1) coincides with the first pixel in the fixed image.
	TransformType::PhysicalDimensionsType   fixedPhysicalDimensions;
	TransformType::MeshSizeType             meshSize;
	for (unsigned int i = 0; i < ImageDimension; i++)
	{
		fixedPhysicalDimensions[i] = fixedImage->GetSpacing()[i] *
			static_cast<double>(
				fixedImage->GetLargestPossibleRegion().GetSize()[i] - 1);
	}
	unsigned int numberOfGridNodesInOneDimension = 24;// 5;
	meshSize.Fill(numberOfGridNodesInOneDimension - SplineOrder);
	transform->SetTransformDomainOrigin(fixedImage->GetOrigin());
	transform->SetTransformDomainPhysicalDimensions(fixedPhysicalDimensions);
	transform->SetTransformDomainMeshSize(meshSize);
	transform->SetTransformDomainDirection(fixedImage->GetDirection());

	typedef TransformType::ParametersType     ParametersType;

	// Initialize transform parameters
	const unsigned int numberOfParameters = transform->GetNumberOfParameters();
	ParametersType parameters(numberOfParameters);
	parameters.Fill(0.0);

	// Set transform parameters
	transform->SetParameters(parameters);

	//  We now pass the parameters of the current transform as the initial
	//  parameters to be used when the registration process starts.

	registration->SetInitialTransformParameters(transform->GetParameters());

	std::cout << "Intial Parameters = " << std::endl;
	std::cout << transform->GetParameters() << std::endl;

	std::cout << "GetTransformDomainOrigin = " << std::endl;
	std::cout << transform->GetTransformDomainOrigin() << std::endl;

	std::cout << "GetTransformDomainPhysicalDimensions = " << std::endl;
	std::cout << transform->GetTransformDomainPhysicalDimensions() << std::endl;

	std::cout << "GetTransformDomainMeshSize = " << std::endl;
	std::cout << transform->GetTransformDomainMeshSize() << std::endl;

	std::cout << "GetTransformDomainDirections = " << std::endl;
	std::cout << transform->GetTransformDomainDirection() << std::endl;


	std::cout << std::endl << "Starting Registration" << std::endl;

	try
	{
		registration->Update();
		std::cout << "Optimizer stop condition = "
			<< registration->GetOptimizer()->GetStopConditionDescription()
			<< std::endl;
	}
	catch (itk::ExceptionObject & err)
	{
		std::cerr << "ExceptionObject caught !" << std::endl;
		std::cerr << err << std::endl;
		return NULL;
	}

	OptimizerType::ParametersType finalParameters =
		registration->GetLastTransformParameters();

	std::cout << "Last Transform Parameters" << std::endl;
	std::cout << finalParameters << std::endl;

	transform->SetParameters(finalParameters);

	typedef itk::ResampleImageFilter<
		ImageType,
		ImageType >    ResampleFilterType;

	ResampleFilterType::Pointer resample = ResampleFilterType::New();

	resample->SetTransform(transform);
	resample->SetInput(movingImage);

	resample->SetSize(fixedImage->GetLargestPossibleRegion().GetSize());
	resample->SetOutputOrigin(fixedImage->GetOrigin());
	resample->SetOutputSpacing(fixedImage->GetSpacing());
	resample->SetOutputDirection(fixedImage->GetDirection());
	resample->SetDefaultPixelValue(100);

	typedef  unsigned char  OutputPixelType;

	typedef itk::Image< OutputPixelType, ImageDimension > OutputImageType;

	typedef itk::CastImageFilter<
		ImageType,
		OutputImageType > CastFilterType;

	typedef itk::ImageFileWriter< OutputImageType >  OutputWriterType;

	OutputWriterType::Pointer      writer = OutputWriterType::New();
	CastFilterType::Pointer  caster = CastFilterType::New();


	writer->SetFileName("output.png");

	caster->SetInput(resample->GetOutput());
	writer->SetInput(caster->GetOutput());

	try
	{
		writer->Update();
	}
	catch (itk::ExceptionObject & err)
	{
		std::cerr << "ExceptionObject caught !" << std::endl;
		std::cerr << err << std::endl;
		return NULL;
	}



	unsigned int numElements = finalParameters.GetNumberOfElements();
	double* finalParameterArray = new double[numElements];
	//std::cout << "Last Transform Parameters 2" << std::endl;
	//std::cout << numElements << std::endl;
	for (unsigned int i = 0; i < numElements; i++) {
		finalParameterArray[i] = finalParameters.GetElement(i);
		//std::cout << finalParameterArray[i] << std::endl;
	} 

	QuickView viewer;
	viewer.AddImage(
		fixedImage.GetPointer(), true,
		"Fixed Image");
	viewer.AddImage(
		movingImage.GetPointer(), true,
		"Moving Image");
	viewer.AddImage(
		resample->GetOutput(), true,
		"Resampled Moving Image");

	viewer.Visualize();

  return finalParameterArray;
}

void CreateImage(ImageType::Pointer image, float *fImage, int *imageDim)
{
	typedef itk::ImportImageFilter< PixelType, ImageDimension >  ImportFilterType;
	ImportFilterType::Pointer importFilter = ImportFilterType::New();

	// Note imageDim is in the order of row-col
	ImportFilterType::SizeType  size;
	size[0] = imageDim[1];  // size along X
	size[1] = imageDim[0];  // size along Y

	ImportFilterType::IndexType start;
	start.Fill(0);

	ImportFilterType::RegionType region;
	region.SetIndex(start);
	region.SetSize(size);

	importFilter->SetRegion(region);

	const itk::SpacePrecisionType origin[ImageDimension] = { 0.0, 0.0 };
	importFilter->SetOrigin(origin);

	const itk::SpacePrecisionType  spacing[ImageDimension] = { 1.0, 1.0 };
	importFilter->SetSpacing(spacing);

	const itk::SizeValueType imageSize = imageDim[0] * imageDim[1];

	const bool importImageFilterWillOwnTheBuffer = true;
	importFilter->SetImportPointer(fImage, imageSize, importImageFilterWillOwnTheBuffer);
	importFilter->Update();

	image->Graft(importFilter->GetOutput());
}

void CreateEllipseImage(ImageType::Pointer image)
{
  typedef itk::EllipseSpatialObject< ImageDimension >   EllipseType;

  typedef itk::SpatialObjectToImageFilter<
    EllipseType, ImageType >   SpatialObjectToImageFilterType;

  SpatialObjectToImageFilterType::Pointer imageFilter =
    SpatialObjectToImageFilterType::New();

  ImageType::SizeType size;
  size[ 0 ] =  100;
  size[ 1 ] =  100;

  imageFilter->SetSize( size );

  ImageType::SpacingType spacing;
  spacing.Fill(1);
  imageFilter->SetSpacing(spacing);

  EllipseType::Pointer ellipse    = EllipseType::New();
  EllipseType::ArrayType radiusArray;
  radiusArray[0] = 10;
  radiusArray[1] = 20;
  ellipse->SetRadius(radiusArray);

  typedef EllipseType::TransformType                 TransformType;
  TransformType::Pointer transform = TransformType::New();
  transform->SetIdentity();

  TransformType::OutputVectorType  translation;
  TransformType::CenterType        center;

  translation[ 0 ] =  65;
  translation[ 1 ] =  45;
  transform->Translate( translation, false );

  ellipse->SetObjectToParentTransform( transform );

  imageFilter->SetInput(ellipse);

  ellipse->SetDefaultInsideValue(255);
  ellipse->SetDefaultOutsideValue(0);
  imageFilter->SetUseObjectValue( true );
  imageFilter->SetOutsideValue( 0 );

  imageFilter->Update();

  image->Graft(imageFilter->GetOutput());

}

void CreateCircleImage(ImageType::Pointer image)
{
 typedef itk::EllipseSpatialObject< ImageDimension >   EllipseType;

  typedef itk::SpatialObjectToImageFilter<
    EllipseType, ImageType >   SpatialObjectToImageFilterType;

  SpatialObjectToImageFilterType::Pointer imageFilter =
    SpatialObjectToImageFilterType::New();

  ImageType::SizeType size;
  size[ 0 ] =  100;
  size[ 1 ] =  100;

  imageFilter->SetSize( size );

  ImageType::SpacingType spacing;
  spacing.Fill(1);
  imageFilter->SetSpacing(spacing);

  EllipseType::Pointer ellipse    = EllipseType::New();
  EllipseType::ArrayType radiusArray;
  radiusArray[0] = 10;
  radiusArray[1] = 10;
  ellipse->SetRadius(radiusArray);

  typedef EllipseType::TransformType                 TransformType;
  TransformType::Pointer transform = TransformType::New();
  transform->SetIdentity();

  TransformType::OutputVectorType  translation;
  TransformType::CenterType        center;

  translation[ 0 ] =  50;
  translation[ 1 ] =  50;
  transform->Translate( translation, false );

  ellipse->SetObjectToParentTransform( transform );

  imageFilter->SetInput(ellipse);

  ellipse->SetDefaultInsideValue(255);
  ellipse->SetDefaultOutsideValue(0);
  imageFilter->SetUseObjectValue( true );
  imageFilter->SetOutsideValue( 0 );

  imageFilter->Update();

  image->Graft(imageFilter->GetOutput());
}
